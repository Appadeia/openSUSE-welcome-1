#!/usr/bin/python
#
#

import inspect
import os
import json
import signal
import time
import webbrowser
import urllib

from simplejson import dumps as to_json

from gi.repository import Gtk
from gi.repository import WebKit

class WelcomeConfig(object):
  def __init__(self):
    self._welcome_bin_path = os.path.abspath(inspect.getfile(inspect.currentframe()))
    self._config_dir = os.path.expanduser("~/.config/korora/welcome/")
    self._autostart_path = os.path.expanduser("~/.config/autostart/welcome")

    # ensure our config directory exists
    if not os.path.exists( self._config_dir ):
      print("Creating path: %s" % self._config_dir)
      os.makedirs( self._config_dir )
    else:
      print("Config path exists: %s" % self._config_dir)


    # does autostart symlink exist
    self._autostart = os.path.exists( self._autostart_path )

  @property
  def autostart(self):
    return self._autostart

  @autostart.setter
  def autostart(self, state):
    if( state and not os.path.exists( self._autostart_path ) ):
      print("Setting up symlink")
      os.symlink( self._welcome_bin_path, self._autostart_path )
    elif( not state and os.path.exists( self._autostart_path ) ):
      print("Tearing down symlink")
      os.unlink( self._autostart_path )

    self._autostart = os.path.exists( self._autostart_path )


class BrowserPage(WebKit.WebView):
  def __init__(self):
    WebKit.WebView.__init__(self)

    self._config = WelcomeConfig()

    self.connect("load-finished",self._load_finished_cb)
    self.connect("navigation-policy-decision-requested",self._nav_request_policy_decision_cb)
    self.l_uri = None


  def _load_finished_cb(self, view, frame):
    # on page load, provide our config
    self.execute_script("$('#autostart').toggleClass('icon-check', %s).toggleClass('icon-check-empty', %s)" % (to_json(self._config.autostart), to_json(not self._config.autostart)))

  def _nav_request_policy_decision_cb(self,view,frame,net_req,nav_act,pol_dec):
    uri = net_req.get_uri()

    try:
      if uri.index('#') > 0:
        uri = uri[:uri.index('#')]
    except ValueError:
      pass

    if uri == self.l_uri:
      pol_dec.use()
      return True

    if uri.startswith('cmd://'):
      self._do_command(uri)
      return True

    self.l_uri = uri

    page = urllib.urlopen(uri)
    frame.load_string(page.read(),"text/html","iso-8859-15",page.geturl())
    pol_dec.ignore()
    return True

  def _do_command(self, uri):

    if( uri.startswith('cmd://') ):
      uri = uri[6:]

    if( uri == "close" ):
      Gtk.main_quit();
    elif( uri == 'toggle-startup' ):
      # toggle autostart
      self._config.autostart ^= True

      # does symlink exist
      self.execute_script("$('#autostart').toggleClass('icon-check', %s).toggleClass('icon-check-empty', %s)" % (to_json(self._config.autostart), to_json(not self._config.autostart)))





    elif( uri.startswith("link?") ):
      webbrowser.open_new_tab(uri[5:])
    else:
      print("unknown commanad: %s" % uri)

class WelcomeApp(object):
  def __init__(self):
    # build window
    w = Gtk.Window()
    w.set_position(Gtk.WindowPosition.CENTER)
    w.set_title("Welcome")
    w.set_size_request(768,496)

    # build webkit container
    wv = BrowserPage()

    # load our index file
    file = os.path.abspath('data/index.html')
    uri = 'file://' + urllib.pathname2url(file)
    wv.open(uri)

    sw = Gtk.ScrolledWindow()
    sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
    sw.add(wv)

    b = Gtk.VBox(homogeneous=False, spacing=0)
    b.pack_start(sw, expand=True, fill=True, padding=0)

    w.add(b)

    w.connect("delete-event", self.close)
    w.show_all()

    self._window = w
    self._webView = wv

  def run(self):
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Gtk.main()

  def close(self, p1, p2):
    Gtk.main_quit(p1, p2);


app = WelcomeApp()

app.run()

